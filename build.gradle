buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.5.3")

        classpath('org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3')
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.flattery'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-devtools")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.security:spring-security-core")

    // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.google.guava:guava:30.1.1-jre')
    compile('org.hibernate:hibernate-ehcache')
    compile('org.hibernate:hibernate-envers')
    compile('org.hibernate:hibernate-core')


    // Use MySQL Connector-J
    compile('mysql:mysql-connector-java')

    testCompile("junit:junit")
    testCompile('org.springframework.boot:spring-boot-starter-test')

}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

bootJar {
    baseName = 'gs-spring-boot'
    version = '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

task copyDeps(type: Copy) {
    from(configurations.compile + configurations.testCompile) {
        include ".jar"
        include ".so", "*.dll"
    }
    into rootProject.rootDir.getAbsolutePath() + "/lib"
//rename can be applied on the files if you want to remove the version from the jar for instance
}