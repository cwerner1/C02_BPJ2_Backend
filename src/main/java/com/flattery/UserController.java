package com.flattery;

import com.flattery.models.User;
import com.flattery.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)

public class UserController extends BaseController {
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    UserRepository userRepository;

    // TODO: Load from a configuration file.
    private static final int BCRYPT_DEFAULT_COST = 12;

    public UserController(UserRepository userRepository) { this.userRepository = userRepository; }

    /**
     * Registers a new user with a name and password.
     *
     * @param name User name (e-mail).
     * @param password User password (plaintext).
     * @return Status
     */
    @GetMapping(path = "/register") // Map ONLY GET Requests
    public @ResponseBody
    String registerUser(@RequestParam String name, @RequestParam String password) {

        if (userRepository.findAllByName(name) != null) {
            return "Exists";
        }

        User user = new User();
        user.setName(name);
        user.setPassword(_hashPassword(password));
        userRepository.save(user);

        return "Registered";
    }


    /**
     * Generates a hashed and salted password for the User.
     *
     * @param plainTextPassword User supplied password in plaintext.
     * @return Hashed and salted password.
     */
    private String _hashPassword(String plainTextPassword)
    {
        return BCrypt.hashpw(plainTextPassword, BCrypt.gensalt(BCRYPT_DEFAULT_COST));
    }


    /**
     * Verifies if the supplied password by the User matches the salted hash.
     *
     * @param candidatePassword the password to test
     * @param hashedPassword    the hashed User Password
     * @return true if the Password matches
     */

    public boolean verifyPassword(String candidatePassword, String hashedPassword)
    {
        return BCrypt.checkpw(candidatePassword, hashedPassword);
    }
}
