package com.flattery;

import com.fasterxml.jackson.databind.util.JSONPObject;
import com.flattery.mapper.WohnungMapper;
import com.flattery.models.Wohnung;
import com.flattery.repositories.WohnungRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/wohnung") // This means URL's start with /demo (after Application path)
@CrossOrigin(origins = "http://localhost:8080")

public class WohnungController extends BaseController{
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    WohnungRepository wohnungRepository;

    public WohnungController(WohnungRepository wohnungRepository2) {
        this.wohnungRepository = wohnungRepository2;
    }

    // TODO: Remove me later.
    @GetMapping(path = "/demoadd") // Map ONLY GET Requests
    public @ResponseBody
    String addNewWohnungDemo() {
        Wohnung n = new Wohnung();
        n.setAddress("Tannenstrasse 12");
        n.setCity("Obiberg");
        n.setCountry("Steiermark");
        n.setRent(500);
        n.setSurfaceArea(42);
        n.setAddedAt(LocalDateTime.now());
        n.setRoomCount(1);
        n.setAvailability(true);
        n.setDescription("Eine sch√∂ne Altbauwohnung mit Loggia");
        n.setPostalCode("8888");
        n.setUser_id(1);
        wohnungRepository.save(n);
        return "Saved";
    }

    @PostMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewWohnung(@RequestBody String payload) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try {
            Wohnung n = WohnungMapper.readJsonWithObjectMapper(payload);
            wohnungRepository.save(n);
            return "Saved";
        } catch (IOException exc) {
            return exc.getMessage();
        }
    }

    @GetMapping(path = "/remove/{str_id}")
    public @ResponseBody
    String removeWohnung(@PathVariable String str_id) {

        try {
            wohnungRepository.deleteById((Integer.parseInt(str_id)));

        } catch (Exception exc) {
            return "Failed";
        }

        return "Deleted";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<Wohnung> getAllUsers() {
        // This returns a JSON or XML with the users
        return wohnungRepository.findAll();
    }

    @GetMapping(path = "/get/{str_id}")
    public @ResponseBody
    Optional<Wohnung> addNewUser(@PathVariable String str_id) {

        Integer id = Integer.parseInt(str_id);

        return wohnungRepository.findById(id);

    }
}
