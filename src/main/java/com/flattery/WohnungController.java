package com.flattery;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.util.JSONPObject;
import com.flattery.mapper.WohnungMapper;
import com.flattery.models.Wohnung;
import com.flattery.repositories.WohnungRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/wohnung") // This means URL's start with /demo (after Application path)
@CrossOrigin(origins = "http://localhost:8080")

public class WohnungController extends BaseController{
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    WohnungRepository wohnungRepository;

    public WohnungController(WohnungRepository wohnungRepository2) {
        this.wohnungRepository = wohnungRepository2;
    }

    // TODO: Remove me later.
    @GetMapping(path = "/demoadd") // Map ONLY GET Requests
    public @ResponseBody
    String addNewWohnungDemo() {
        Wohnung n = new Wohnung();
        n.setAddress("Tannenstrasse 12");
        n.setCity("Obiberg");
        n.setCountry("Steiermark");
        n.setRent(500);
        n.setSurfaceArea(42);
        n.setAddedAt(LocalDateTime.now());
        n.setRoomCount(1);
        n.setDescription("Eine sch√∂ne Altbauwohnung mit Loggia");
        n.setPostalCode("8888");
        n.setUser_id(1);
        wohnungRepository.save(n);
        return "{\"wohnung_id\": " + Integer.toString(n.getId()) + "}";
    }

    @PostMapping(path = "/add")
    public @ResponseBody
    String addNewWohnung(@RequestBody String payload) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try {
            Wohnung n = WohnungMapper.readJsonWithObjectMapper(payload);
            wohnungRepository.save(n);
            return "{\"wohnung_id\": " + Integer.toString(n.getId()) + "}";
        } catch (IOException exc) {
            return exc.getMessage();
        }
    }

    @PostMapping(path = "/remove")
    public @ResponseBody
    String removeWohnung(@PathVariable String str_id) {
        try {
            wohnungRepository.deleteById((Integer.parseInt(str_id)));

        } catch (Exception exc) {
            return "{\"status\": \"failed\"}";
        }

        return "{\"status\": \"success\"}";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    String getAllWohnung() {

        Iterable<Wohnung> wohnungs = wohnungRepository.findAll();

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.writeValueAsString(wohnungs);

        } catch (IOException exc) {
            return "{\"status\": \"failed\"}";
        }
    }

    @GetMapping(path = "/get/{str_id}")
    public @ResponseBody
    String getWohnung(@PathVariable String str_id) {

        Integer id = Integer.parseInt(str_id);

        Optional<Wohnung> wohnungOptional = wohnungRepository.findById(id);
        if (!wohnungOptional.isPresent()) {
            return "{\"status\": \"Diese Wohnung existiert nicht.\"}";
        }
        Wohnung wohnung = wohnungOptional.get();

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            return objectMapper.writeValueAsString(wohnung);

        } catch (IOException exc) {
            return "{\"status\": \"failed\"}";
        }
    }

    @GetMapping(path = "/average")
    public @ResponseBody
    String getAverage(@RequestParam String city) {

        List<Wohnung> wohnungs = wohnungRepository.findAllByCity(city);

        if (wohnungs.isEmpty()) {
            return "{\"average\": 0, \"averageSqM\": 0}";
        }

        double totalRent = 0.0;
        double totalRentSqM = 0.0;
        int count = 0;
        for (Wohnung w : wohnungs) {
            double surfaceArea = w.getSurfaceArea();
            double rent = w.getRent();

            totalRent += rent;
            totalRentSqM += rent/surfaceArea;

            count++;
        }

        double avgRent = totalRent / count;
        double avgRentSqM = totalRentSqM / count;

        return "{\"avgRent\": " + Double.toString(avgRent) + ", \"avgRentSqM\": " + Double.toString(avgRentSqM) + "}";
    }
}
